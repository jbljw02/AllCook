import bannerImg from "/public/images/banner-img.jpg";
import Image from "next/image";
import { useCallback, useEffect, useRef, useState } from "react";
import { RootState } from "../redux/store";
import { useDispatch, useSelector } from "react-redux";
import { setRecomMenu, setDessertMenu, setAllMenu, setDisplayedMenu } from "@/redux/features/menuSlice";
import { wrapper } from "../redux/store";
import { Menu } from "../redux/store";
import Link from "next/link";
import Header from "../components/Header";
import Footer from "../components/Footer";
import HeaderOnContents from "../components/HeaderOnContents";
import Seo from "../components/Seo";
import moveToDetail from "@/utils/moveToDetail";
import { setRecipe } from "@/redux/features/recipeSlice";
import axios from "axios";
import Skeleton from 'react-loading-skeleton'
import 'react-loading-skeleton/dist/skeleton.css'
import { RecomMenu } from "@/components/RecomMenu";
import SkeletonUI from "../components/Skeleton";
import shuffleArray from "@/utils/shuffleArray";

export default function Home() {
    const dispatch = useDispatch();

    const [scrollPassContent, setScrollPassContent] = useState(false); // 스크롤이 컨텐츠 영역을 지났는지
    const [headerSlide, setHeaderSlide] = useState(false); // 헤더의 슬라이드를 처리하기 위함
    const contentsRef = useRef<HTMLDivElement>(null);

    const allMenu = useSelector((state: RootState) => state.allMenu);
    const displayedMenu = useSelector((state: RootState) => state.displayedMenu);

    const recomMenu = useSelector((state: RootState) => state.recomMenu);
    const dessertMenu = useSelector((state: RootState) => state.dessertMenu);

    useEffect(() => {
        (async () => {
            const categories = ['일품', '반찬', '국&찌개'];
            const randomIndex = Math.floor(Math.random() * categories.length);
            const selectedCategory = categories[randomIndex];

            // 포함하지 않을 문자열을 필터링하는 정규식
            // 미완된 음식의 이미지나, 워터마크가 있는 이미지를 필터링하기 위함
            const regex =
                /(uploadimg\/(2014|2015|2019|2020|2021|2023)|common\/ecmFileView\.do\?)/;

            const excludeSeqs = ['2981', '886', '3217', '977', '745', '760'];
            try {
                const response = await fetch(`/api/fetchRecomMenu?RCP_PAT2_1=후식&RCP_PAT2_2=${selectedCategory}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                })
                const jsonResponse = await response.json()

                let dessertResponse: Menu[] = shuffleArray(jsonResponse.RCP_PAT2_1);
                dessertResponse = dessertResponse.filter((item: Menu) => {
                    // ATT_FILE_NO_MK 값에서 정규식과 일치하는 부분을 찾음
                    // match 함수를 이용해 정규식과 일치한다면 배열로 반환하고, 일치하지 않는다면 null
                    const match = item.ATT_FILE_NO_MK.match(regex);
                    // match가 null인 경우에만 item 반환
                    // ** filter 함수가 true일 때 item을 반환하고, false일 땐 반환하지 않는 것을 이용 **
                    return match === null && !excludeSeqs.includes(item.RCP_SEQ);
                })

                let recomResponse: Menu[] = shuffleArray(jsonResponse.RCP_PAT2_2);
                recomResponse = recomResponse.filter((item: Menu) => {
                    // ATT_FILE_NO_MK 값에서 정규식과 일치하는 부분을 찾음
                    // match 함수를 이용해 정규식과 일치한다면 배열로 반환하고, 일치하지 않는다면 null
                    const match = item.ATT_FILE_NO_MK.match(regex);
                    // match가 null인 경우에만 item 반환
                    // ** filter 함수가 true일 때 item을 반환하고, false일 땐 반환하지 않는 것을 이용 **
                    return match === null && !excludeSeqs.includes(item.RCP_SEQ);
                })

                dispatch(setDessertMenu(dessertResponse));
                dispatch(setRecomMenu(recomResponse));
            } catch (error) {
                console.error("API 호출 도중 에러 발생 : ", error);
            }
        })();
    }, []);

    console.log("디스 : ", displayedMenu);
    useEffect(() => {
        // 헤더가 배너 영역에 도달하면 스타일을 바꾸기 위한 함수
        const checkScrollLocation = () => {
            const margin = 50;
            if (contentsRef.current !== null) {
                // scrollPassContent가 false이며, 스크롤의 위치가 contents-container보다 낮을 경우
                if (
                    !scrollPassContent &&
                    window.scrollY > contentsRef.current.offsetTop + margin
                ) {
                    setHeaderSlide(false);
                    setScrollPassContent(true);
                }
                // scrollPassContent false이며, 스크롤의 위치가 contents-container보다 높을 경우
                else if (
                    scrollPassContent &&
                    window.scrollY <= contentsRef.current.offsetTop - margin
                ) {
                    /* scrollPassContent가 바로 false로 변경되면 unmount animation을 적용할 수 없음(애니메이션이 적용되기도 전에 컴포넌트가 사라지기 때문). 
                    그렇기 때문에 headerSlide를 통해 애니메이션을 미리 제어하고, 0.5초 뒤에 상태를 변경 */
                    setHeaderSlide(true);
                    setTimeout(() => {
                        setScrollPassContent(false);
                    }, 300);
                }
            }
        };

        // 스크롤 이벤트 발생시에 함수 호출('이벤트 타입', 이벤트 발생시 실행할 함수)
        window.addEventListener("scroll", checkScrollLocation);

        // 컴포넌트 언마운트시, 혹은 useEffect 재실행 전에 이벤트 리스너 제거
        return () => {
            window.removeEventListener("scroll", checkScrollLocation);
        };
    }, [scrollPassContent]);

    const arr: any[] = []

    // allMenu.map((item, index) => {
    //     if (item.RCP_PAT2 === '후식') {
    //         // arr.push(index + 1);
    //         // console.log(index, "번째 : ", item.RCP_PAT2);
    //         // console.log(item);
    //     }
    //     console.log("종류 : ", item.RCP_PAT2);
    // })
    // console.log("배열 : ", arr);
    // console.log("모든 메뉴 : ", allMenu);



    // 홈 화면에 글자에 split 효과를 주기 위함
    const titleText1 = "환영합니다! 우리는 All Cook,";
    const titleText2 = "당신의 요리 파트너입니다.";
    const [displayedText1, setDisplayedText1] = useState("");
    const [displayedText2, setDisplayedText2] = useState("");

    // const testMenu = useSelector((state: RootState) => state.testMenu);
    // let results = testMenu.filter((item) => item.RCP_NM.includes('돼지'))

    // useEffect(() => {
    //     // titleText를 배열로 만든 후 setTimeout을 이용해 화면의 차례로 출력
    //     titleText1.split("").forEach((str, index) => {
    //         setTimeout(() => {
    //             setDisplayedText1((prev) => prev + str);
    //         }, index * 60);
    //     });
    //     // titleText1이 전부 출력된 후 실행되도록 설정
    //     titleText2.split("").forEach((str, index) => {
    //         setTimeout(() => {
    //             setDisplayedText2((prev) => prev + str);
    //         }, (index + titleText1.length) * 60);
    //     });

    // }, [titleText1, titleText2]);

    const [recomHovered, setRecomHovered] = useState<boolean[]>([]);
    const [dessertHovered, setDessertHovered] = useState<boolean[]>([]);

    const imgMouseEnter = (index: number, param: string) => {
        if (param === "recom") {
            setRecomHovered((prev) => {
                const newHoverState = [...prev];
                newHoverState[index] = true;
                return newHoverState;
            });
        }
        if (param === "dessert") {
            setDessertHovered((prev) => {
                const newHoverState = [...prev];
                newHoverState[index] = true;
                return newHoverState;
            });
        }
    };
    const imgMouseOut = (index: number, param: string) => {
        if (param === "recom") {
            setRecomHovered((prev) => {
                const newHoverState = [...prev];
                newHoverState[index] = false;
                return newHoverState;
            });
        }
        if (param === "dessert") {
            setDessertHovered((prev) => {
                const newHoverState = [...prev];
                newHoverState[index] = false;
                return newHoverState;
            });
        }
    };

    

    // 특정 메뉴를 클릭하면 해당 메뉴의 레시피 페이지로 이동
    const menuClick = (name: string, seq: string) => {
        const selectedMenu = moveToDetail(name, seq, displayedMenu);
        dispatch(setRecipe(selectedMenu));
    }

    return (
        <>
            <Seo title="홈" />
            {/* 홈 화면의 전체 영역을 차지하는 컨테이너  */}
            <div className="container">
                {/* 헤더부터 이미지 배너까지의 영역을 차지하는 컨테이너 */}
                <div className="header-container">
                    {
                        // 스크롤이 contents-container 영역을 지나치면 헤더가 사라지도록 설정
                        !scrollPassContent ? (
                            <Header
                                position="absolute"
                                backgroundColor="transparent"
                                color="#ffffff"
                                borderColor="transparent"
                                svgFill="#ffffff"
                                lightLogo={true}
                                inputBackgroundColor="#ffffff"
                            />
                        ) : (
                            <HeaderOnContents
                                className={!headerSlide ? "slide-down" : "slide-up"}
                            />
                        )
                    }
                    {/* 배너 문구와 검색창을 차지하는 컨테이너 */}
                    <div className="banner-container">
                        <div className="welcome-section">
                            환영합니다! 우리는 All Cook, <br />
                            당신의 요리 파트너입니다
                        </div>
                        {/* {
                            // 화면에 글자가 모두 출력된 후 fade in 효과를 적용하며 출력
                            displayedText2.length === 14 ?
                                <div className='search-section'>
                                    <div>당신을 위한 모든 레시피</div>
                                    <div className='input-container'>
                                        <div className='learn-more'>
                                            <Link
                                                style={{ textDecoration: 'none', color: 'inherit' }}
                                                href={'/recipe'}>
                                                레시피 보기
                                            </Link>
                                        </div>
                                    </div>
                                </div> :
                                ''
                        } */}
                        <div className="search-section">
                            <div>당신을 위한 모든 레시피를 찾아보세요!</div>
                            <div className="banner-button">
                                <span>
                                    <Link
                                        style={{ textDecoration: "none", color: "inherit" }}
                                        href={"/recipe"}
                                    >
                                        지금 레시피 보기
                                    </Link>
                                </span>
                            </div>
                        </div>
                    </div>
                    <span className="banner-img">
                        <Image src={bannerImg} alt={""} layout="responsive" />
                    </span>
                </div>

                {/* 헤더,풋터 및 배너 컨테이너를 제외한 컨텐츠의 영역 */}
                <div ref={contentsRef} className="contents-container">
                    {/* 서비스에 대해 설명하는 영역을 차지하는 컨테이너 */}
                    <div className="explain-container">
                        <span className="explain-img">
                            <svg
                                fill="none"
                                className="explain-svg"
                                xmlns="http://www.w3.org/2000/svg"
                                viewBox="0 0 400 400"
                            >
                                <path
                                    d="M76 266.8v-.9l.2-1.7c.1-1.8.3-2.6.5-4.4.4-2.5 1.2-4.8 2-7.2l.5-1 .4-.9a80.4 80.4 0 0 1 8.1-14.3l2.7-3.4.7-.8.7-.7c1.6-2 3.6-3.7 5.6-5.4l.7-.8 2-1.7.5-.4c1-1.2 2.5-2 3.7-3.2l3.6-3.2 1.5-1 2-1.6c.9-.7.7-1.3-.4-1.6l-1.6-.4c-2.6-.4-5-1.3-7.4-2.2l-3.3-1.5-4.2-2c-.6-.2-1-.5-1.6-.9l-1.7-1.2a14.3 14.3 0 0 1-4.3-4.3l-1.5-2.5a9.1 9.1 0 0 1-1.3-3.8c-.3-1.7-.5-3.3-.5-5 .1-2.4.1-5 .5-7.5.2-1.7.8-3.4 1.4-5 1-2.7 2.4-5.1 3.8-7.5l2.2-3.6.2-.5c.2-.5.2-.8-.2-1.2l-.7-.4c-1.4-.8-2.6-1.9-3.6-3.1l-1.5-2.1-.2-.3c-.5-1.3-1.1-2.5-1.4-4l-.7-3.5a9.8 9.8 0 0 1 0-3.4l.6-4.2c.4-2.5 1-5 2.4-7.2l.8-1.9c.5-1 1-2 1.9-2.9l1.3-1.6c.6-1 1.3-1.8 2-2.5L95 124l1.7-1.5 1.2-1c1.9-2 3.9-3.6 5.8-5.3l4-3.8 1.4-1.2a14 14 0 0 0 2.4-2.5l.4-.5a41 41 0 0 0 7-10.9c1.3-2.8 2.7-5.5 4.5-7.9l4-4.6c1.1-1.4 2.4-2.7 3.6-4l.4-.5c1.7-1.4 3.2-3 5-4.2 1.5-1 3-2.1 4.4-3.3l1.4-1c1.7-1 3.3-2 5.2-2.8l.2-.1c1.6-1 3.4-1.3 5.2-1.5a31 31 0 0 1 4.1-.2l2 .2 1.5.2c.7 0 1.4 0 2.1.2l5.8 1.6 1.5.6 2 .7c.2 0 .5.1.7.3 1.3.8 2.7 1.4 3.9 2.4l3.3 2.9c1.5 1.2 2.7 2.7 3.4 4.5l1.6 4.1.1.5c.1 1.8.4 3.4.4 5.2 0 1-.3 2-.6 3-.6 1.8-1.5 3.5-2.7 5l-1.2 1.3-.3.5c-.3.6-.2 1.1.1 1.6l1 1a39 39 0 0 0 2 1.7c.9.6 1.5 1.3 2 2.2.4.7.6 1.4.5 2.2 0 .8.3 1.3 1 1.7l2 .8c2.2.8 4.5 1.6 6.6 2.7l3.1 1.8 1 .5c.6.3 1 .3 1.5-.2l.4-.5a6 6 0 0 1 2.6-2c1.7-.9 3.6.1 4.2 1.9.5 1.4.3 2.8-.4 4-.8 1.3-1.4 2.7-2.4 4l-1 1.4c-.9 1.3-2 2.4-3.3 3.2-.6.3-1.1.8-1.7 1.2-.8.5-1.8.6-2.6.2-1-.4-1.6-1.2-1.6-2.4 0-.9.1-1.8.5-2.6l.6-1.5c.3-.9.2-1.3-.6-1.9l-3-1.8-5.6-2.3-2.7-1a4 4 0 0 0-.9-.2c-.2 0-.4.2-.3.4 0 .4.2.7.4 1 .4 1 1 2 1.1 3.1.5 2.7.5 5.3-.7 7.8a3 3 0 0 1-.7 1l-3 2.3c-1.3.6-2.4.6-3.6 0-1.3-.5-2-1.6-2.1-3v-1.8c.2-1.7-.5-2.6-2.1-3-.8 0-1.6 0-2.4-.2-.8 0-1.4.2-2 .7l-1.1 1.4-1.5 1.8-1.1 1.3-2.2 3.4-2.2 3.5c-.8 1.2-1.4 2.5-1.9 3.8l-1.3 3.1c-.6 1.5-1 3-1.4 4.5l-1.4 5.5c-.2.6-.4 1.2-.3 1.8l-.2 1.1c0 .8.2 1.3 1 1.6l3.7 1.1 3.6 1.1c1.4.6 2.5 1.4 3.5 2.5.6.8.8 1.7 1 2.5v.1c.5 1.5 0 2.8-.3 4.2-.4 1.4-1.2 2.6-2 3.8-1.1 1.3-1 1.5 0 2.6.4.4.7.8.9 1.3.4 1.7-.8 3.3-2.6 3.3H161c-1 0-1.8.2-2.6.5l-.9.3c-1 .3-1.8 1-2.3 2l-.3.6a3 3 0 0 0-.2 2c.5 2.7 1.8 5 4 6.8a18 18 0 0 0 3.7 2.5c1 .5 2.3.6 3.4.8 1.7-.2 3.4-.5 4.5-2 .7-1 1.2-1.9 1.5-3 .3-1.5 1.5-2.2 2.9-2.4.3-.1.9 0 1.2.3 1.1.7 1.7 1.8 1.6 3.1a6.7 6.7 0 0 1-1.2 3.3l-.9 1.5c-.4.9-.2 1.3.6 1.9l2.1 1.2a91 91 0 0 0 5 2c1 .4 2 .6 3.1.9 1.4.4 2.8.3 4.3.2 1-.1 2.1-.3 3.1-.7l1-.3c1-.3 1.9-.7 2.7-1.3l4.7-3.1c.5-.4 1-.7 1.3-1.1.7-.6 1.4-1 2.2-1.4l1.3-.5c1-.6 2-.5 3-.3 1.8.3 3.5.8 5.3.6 1.6-.1 3.1-.3 4.7-.7 1.8-.5 3.4-1.5 4.7-2.7 1-.8 1.7-1.8 2.6-2.7.8-1 1.5-2 2-3l.7-2.3c.2-.5.2-1 .3-1.6a10 10 0 0 1 1.8-3.7l.2-.3a12 12 0 0 0 2.7-6c.2-.8.2-1.8.3-2.7l.2-3-.1-2.4c-.1-2-1-3.7-1.4-5.5 0-.4-.3-.8-.5-1.1-.3-.4-.6-.5-1-.2l-.7.4-1.5 1.3c-1 1-2 1.7-3 2.4-1 .6-1.3 1.2-.8 2.2.4 1 .7 2 .8 3 .2 2.1.4 4.3-.7 6.4l-.7 1.9c-.4 1-1 2-1.6 2.8-1 1.2-1.9 2.2-3 3.2l-1.7 1a2 2 0 0 1-1.5-.2c-.6-.2-1.1-.6-1.4-1.2-.2-.2-.4-.6-.4-1 0-1 .3-2.1 1.2-3l2-2c1-1.2 1.4-2.7 1.7-4.1l.4-1.8v-.5c0-1.2-.4-2.2-1.1-3.1-.5-.6-1.2-.7-1.8-.7h-1.3c-.5.1-1 .2-1.6 0h-.9c-.8-.2-1.3.2-1.6 1-.3.5-.6 1.1-.7 1.8-.5 1.4-1.3 2.6-2.3 3.7a129.1 129.1 0 0 1-4.7 5l-3.3 2.2c-.8.5-1.6.7-2.4 1l-1.7.4-2.3.2c-1.4-.1-2.8-.5-4-1.2-1.7-1-3-3-2.5-5 .3-1.1.8-1.9 1.6-2.4l2-1.1 1.8-1.2a17.4 17.4 0 0 0 4.9-8.5 4 4 0 0 0 0-2l-.5-1.7c-.4-1.2.5-2.8 1.8-3.2.8-.3 1.7-.3 2.6 0 1.3.3 2.7.6 4 .7 1.2.1 2.4 0 3.5-.2h.4c1.4-.5 2-1.5 1.7-3-.2-1.2-.8-2-1.7-2.8l-1-.8-3.6-2-1.5-1c-.9-.6-1.8-.9-2.8-1.3l-5.7-2.3a3.5 3.5 0 0 1-2.4-3.3c0-.7.3-1.2.9-1.6 1-.6 2-.8 3-.4l2 .6 1.3.6c.7.2 1.2 0 1.6-.6l1.3-2.2c.6-1 1.2-2.2 2-3.2.9-1.1 2-2 3.3-2.5l1.8-.9c.9-.4 1.7-.6 2.7-.6.9 0 1.7.2 2.3.9 1 1 1.6 2 1.9 3.4.3 1.6-.1 3-1 4.2a3 3 0 0 1-2.4 1.3c-1 0-2 0-2.8-.5l-.9-.3c-.7-.3-1.2-.2-1.5.5l-1 2.2c-.1.6.2 1.1.7 1.5l1.3.8c1.3.6 2.4 1.4 3.6 2.2a13 13 0 0 1 3.1 3.5l.9 1.4c.4.6 1 .9 1.8.8a22 22 0 0 0 1.8-.5c.3 0 .6-.2.8-.4.7-.4.8-1 .4-1.7l-2-2.8c-.5-.6-.8-1.2-1-2-.4-1.2.2-3 2-3.6.5-.2 1-.1 1.4.1.9.5 1.8 1 2.4 1.9.3.4.7.8 1.3 1a6 6 0 0 1 1.7 1.2c.7.7 1.6.9 2.6.6 1.8-.6 3.3.1 4.1 1.8a7 7 0 0 1 .8 3.9c-.1 1 .2 2 .7 3l.6 1.5 2.2 6c.6 1.4 1 3 1 4.6l.3 3.9-.2 2.4a35.6 35.6 0 0 0-.4 5.8c0 .2.3.3.5.1l.5-.5 3.9-5 .7-1 1.7-1.8 1.5-1.5c.5-.4 1-1 1.2-1.6l1.6-3.4c1-2.2 2.4-4.3 4.2-6 1-1 2-1.6 3.1-2.5l.3-.1a3 3 0 0 0 1.7-2.8c0-.8.2-1.5.4-2.2l1.5-5.8c.3-1.5.9-2.9 1.2-4.3.7-2.4 1.1-4.8 1-7.3 0-1.4-.2-2.8-.4-4.2l-.4-2.3c-.2-1.3-.4-2.6-.8-3.9-.5-1.5-.6-3-.2-4.6.3-1.3.6-2.6 1.1-3.8 1-2 2.4-3.7 4-5.2l1.1-1a9.4 9.4 0 0 1 4.6-3l1-.4c1-.4 1-1 .2-1.8l-1.2-1-2.6-2.2a9 9 0 0 1-1.8-2.4l-.5-.8c-.5-.5-1-.7-1.6-.5-.5.2-1 .8-1 1.4v.7c.2.6.1 1.2 0 1.8-.4 1.7-1 3.3-2 4.7-.3.2-.4.4-.5.7-.8 1.5-1.9 2.9-3 4.2l-1 1.4c-.6 1-1.4 1.8-2.4 2.3-1 .5-2 1-3.2 1.4l-2 .4c-1.3.4-2.7.2-4 .4a4 4 0 0 1-1.7-.3l-4.8-1.8c-.4 0-.7-.3-1-.5l-1.4-.7c-1.7-.9-3-2.2-3.9-3.8l-.7-1.2c-1-1.4-1.4-3-1.8-4.8-.3-1.8 0-3.3.8-4.9.4-.8.8-1.6 1-2.6 0-.4.3-.7.5-1 .7-1.1 1.4-2.2 2.4-3l1.3-1.5c1.4-1.7 2.9-3.2 4.5-4.6l1.3-.7c1.1-.4 1.6-1.1 1.7-2.3a88.6 88.6 0 0 1 .6-6.9c.8-3 2.3-5.7 4-8.2l1.5-2.2 2-2.4 1-1.4c.4-.5.3-1 0-1.4l-.8-.8A6.2 6.2 0 0 1 254 48a10.7 10.7 0 0 1 4.1-5.4c.6-.3 1.1-.8 1.6-1.3 1.1-1 2.3-2 3.7-2.7l1.7-1a35.2 35.2 0 0 1 6.1-3c.7-.3 1.4-.3 2.2-.3h.8c2-.1 4 .4 6 1 1 .3 1.8.8 2.5 1.6l.8.8c1.4 1.1 2.3 2.6 3 4.2l.7 1.4c.3.6.7 1 1.4 1l2.2.5c1 .3 2 .7 2.8 1.3l1.1.8c1.4 1 2.2 2.4 2.4 4 .2 1 .7 1.6 1.7 1.8 2 .6 4 1.3 5.8 2.5 2 1.3 3.4 3.2 4.3 5.4.4 1.1.6 2.3.8 3.5l.4 2.6c.2 1 .2 2 0 3-.1 1 0 2 .3 3.1l1.1 4.7.1.8.3 5.5c0 .7.1 1.3.4 2 .5 1.7 1 3.4 1.3 5.2l.2 2.2v.5c.1 1 .6 1.8 1.7 2 1 .2 1.6.8 2 1.8.3 1 .6 2 .6 3.1 0 1.5 0 3 .4 4.6l.1 1.3.2 2.2v.9l-.1.8a10 10 0 0 1 0 3.3l-.1.9c.2 1.5 0 3 0 4.5 0 .8 0 1.6-.2 2.4l-.1.7v6l-.2 2.2-.3 6.1v.6c-.3 1.5-.2 3-.2 4.5 0 .7-.1 1.3-.3 2-.2 1-.2 1.9-.2 2.8v.6c-.4 1.7-.1 3.4-.3 5v2.6c.2 1.1 0 2.2 0 3.3l.1.7c.4 2 .3 4.2.3 6.3l.1 2v.6c0 1.8-.1 3.5-.8 5.2-.3.6-.4 1.3-.5 1.9a16 16 0 0 1-1.4 4.2c-.8 1.8-1.7 3.5-2.3 5.4l-2 5.4-.6 2.3c-.5 1.7-1.2 3.2-1.8 4.8l-1.2 3.2c-.5 1-1 2.1-1.7 3-.9 1.1-1.4 2.3-2 3.5l-1.3 2.9-2.5 4-.8 1.4c-.7 1.8-2 3-3.5 4.3l-1.6 1.3a11 11 0 0 0-2.1 2.6c-1 1.4-1.7 3-2.4 4.5l-.3.9c-.5 1-1.1 2-2.1 2.6-.7.4-1.2 1.1-1.7 1.8l-.9 1.2c-1.1 1-2 2.3-3.1 3.5-1 1-1.7 2.3-2.6 3.4-.7 1-.7 2-.2 3 .6 1.5 1 3 1.5 4.6l1 2.3 1.2 3 .7 1.5.7 1.9 1 2.1c.5 2.2 1.6 4.2 2.4 6.3.9 2.2 1.7 4.4 2.3 6.7l1 4.4c.2.9.6 1.7 1 2.6.2.6.6.9 1.3.8h2c1 0 2 .2 3 .7l1.4.8a40.5 40.5 0 0 1 5 4.9c1.4 2.4 2.6 4.8 3.6 7.4l.5 1.9c.3 1 1 1.5 2 1.5h.7l3.8-1c1-.2 1.8-.5 2.7-1l3-1.6a12 12 0 0 1 4.3-1.4 10 10 0 0 1 3.8.1l2.3.5c2.2.7 3.9 2.1 5.3 3.8 1 1.2 1.4 2.7 1.7 4.1v.1c.4 1.5.5 3 0 4.5v.2c.1 1.2-.5 2-1.2 2.9a10.5 10.5 0 0 1-7.7 4l-3.2.2h-1.7l-1-.2h-5l-4.8.3-3.2.7c-.8.2-1.4.6-1.6 1.5a151.1 151.1 0 0 1-1.8 6.8l-1.7 3.6a9.6 9.6 0 0 1-5.3 5c-.7.3-1.4.5-2.2.3-.8 0-1.5.1-2.2.3-1.5.2-2.9.6-4.3.9l-.7.1c-1.1 0-2.2.3-3.4.5l-2 .2-1.5.3c-1.3.5-2.6.5-4 .7a42 42 0 0 0-4.3.8c-.7.2-1.5.2-2.2.3-2 .4-4 .6-5.8.8-.6 0-1 .2-1.6.3l-3 .5-5.4.6-1.6.3c-2.4.3-4.9.6-7.3.7-1.3.1-2.5.4-3.7.6-1.8.2-3.5.6-5.3.6l-1 .1-6 .9c-.7 0-1.3 0-2 .2-2.1.5-4.3.6-6.5 1l-3 .5c-1.8.3-3.6.6-5.4.7-.7 0-1.5 0-2.2.2-2.4.5-4.8.7-7.1 1-1.4 0-2.7.3-4 .6l-3.5.4c-1 0-2 .3-2.9.4l-1.3.2-1.4.1-4.3.6c-.6.1-1.3.1-1.9.3-1.2.4-2.5.4-3.7.6l-2.8.5-1.8.3h-.5l-4 .8-4 .6-2.6.5-2.4.4-2.8.5h-1.1l-3.4-.3c-1 0-1.8-1-3-1l-.6-.3-1-.7a10.8 10.8 0 0 1-4.1-5.3l-.6-1.2c-1-2.2-1.4-4.5-1.2-6.9v-1.1c0-.4-.2-.7-.5-.8-.3-.1-.6-.2-.8-.1l-2 .6-6.7 1.4a15.2 15.2 0 0 1-3.7.2c-1.5 0-2.9-.2-4.2-1l-.5-.2c-1-.6-2-1.3-2.8-2.1a12.6 12.6 0 0 1-3.1-6c-.2-.6-.2-1.2-.2-1.9v-1.6c0-.5-.2-1-.7-1.2l-1.3-.7c-.7-.4-1.3-.7-1.8-1.2-.6-.7-1.4-1.2-2.2-1.7l-1.9-1.3c-.6-.5-1.3-1-2-1.2-1.2-.4-2.3-1.1-3.3-1.7-1.8-1-2.4-2.6-3-4.4-.4-2.6 0-5.1 1.7-7.3.7-.9 1.4-1.7 2.4-2.2.7-.4 1.1-1 1.1-1.8 0-.6.3-1.1.5-1.7l1-2.2c.4-.9.3-1.2-.6-1.8l-.3-.1a21.3 21.3 0 0 0-6.5-2.2l-2-.3c-1-.2-1.9-.5-2.9-.6-2-.3-4-1-5.8-2-1.7-.7-3.3-1.7-5-2.5-.6-.3-1.1-.7-1.6-1.2l-4-3.3-1.5-1.3a140 140 0 0 1-3.2-3.6c-.9-1.1-1.5-2.4-1.9-3.8l-.8-3-.1-1.2Zm114.3 21.5v2.6c0 .9.4 1.4 1.4 1.3l2.7-.5c.3 0 .6-.2.9-.1 1.2.1 2.4-.5 3.7-.3.8-.2 1.7-.2 2.5-.3.8-.2 1.7-.2 2.6-.2l1.5-.1 1.8-.3c1.8 0 3.6-.6 5.5-.5h.5l1-.2 5.6-.5 3-.3 2.8-.2h.5l2-.5c.7 0 1.5 0 2.3-.2 1.9 0 3.8-.6 5.7-.5 1 0 2-.2 3-.4l2.6-.5c1 0 2 0 3-.3l2.4-.3 2.9-.4c1.1-.1 2.3-.1 3.4-.3.8-.1 1.6-.5 2.5-.4l.6-.1c.9-.1 1.7-.4 2.7-.4 1.1 0 2.3-.1 3.4-.3 1.7-.3 3.5-.6 5.2-.7 1.5 0 2.9-.3 4.3-.5h.2l1.7-.4 4.4-.5 1.3-.2 2.4-.3 1.5-.4c.6-.3.8-.6.6-1.3-.2-1.2-.5-2.4-1-3.5-.4-1.7-1.1-3.2-1.6-4.9-.8-3.3-2.2-6.5-3.5-9.7l-2.3-5.4-2.2-5.5c-.8-1.8-1.6-3.5-1.9-5.4l-.2-.6-.8-2.3c0-.4-.2-.8-.4-1.2-.2-.7-.5-1.3-.6-2-.2-1.4-.7-2.8-1.3-4a30.5 30.5 0 0 1-1.4-3.9c-.3-1.3.4-2.5 1.6-2.9 1-.3 2-.3 2.8.6l.8.9 1.9 3.2c.6 1 1 1.2 1.8.3a216 216 0 0 0 4.5-5.3c.2-.4 0-.7-.5-.8h-2.6c-.7 0-1.2-.2-1.7-.5a2.3 2.3 0 0 1-.2-3.7 4 4 0 0 1 1.2-.7l4.7-1.6a35.4 35.4 0 0 0 9.8-6.7l1.4-1.9c.9-1 1.8-2.1 2.4-3.4.4-.8.7-1.7 1.2-2.4.8-1.4 1.3-2.8 1.8-4.2.5-1.2 1-2.2 2-3 .8-.7 1.2-1.5 1.4-2.5l.8-2.2 1-2.6.5-1.7 2.3-6.8c.5-1.4.8-2.8 1.5-4 1.2-2.2 2-4.5 2.8-6.9l.5-2v-1.1l.2-1c.1-1.4.3-2.7 0-4.1-.2-.9-.1-1.7-.2-2.5v-5.6c-.1-.5 0-1 0-1.6l-.2-2.1v-2.8c.2-1.3 0-2.8.4-4.1v-.6l.1-3.3.4-3.4v-1.8l.4-5.7V126l.2-2.2v-1.3c0-1.9.2-3.7.3-5.5l.1-1.5c0-.8.2-1.6 0-2.4a28 28 0 0 1-.2-4.5v-.8c-.2-1.3-.8-1.6-1.9-.8l-1.5 1.1c-1.5 1.1-3 2.3-4.5 3.2-1.5 1-3.1 1.6-4.7 2.4l-3 1.4-1.5.6-1.5.6c-1 .4-2 1-3.1 1.3l-4.1 1.4c-1.5.4-3 .8-4.6 1l-1.4.4c-1.2.4-2.3.7-3.5.7h-.6c-1.2.3-2.5.2-3.7.3l-1 .1c-.3.1-.5.4-.5.8v1.1c.2.9.4 1.7.3 2.6v1.9c.1.6.2 1.3 0 2l-.4 2c0 .9-.1 1.9-.3 2.8-.4 2-.8 4-1.5 5.9l-.3 1.4-.4 1.7a37.4 37.4 0 0 0-1.7 11.3c0 1.8.6 3.5 1.1 5.1.5 1.5 1.1 3 1.4 4.6 0 .5.1 1-.1 1.4l-1 1.6c-.6.9-2 1.2-3.2.5l-.8-.6c-.6-.5-1-1.1-1-2-.1-1-.4-2-1-3l-.7-2.5c0-.5-.1-1-.3-1.4-.2-.6-.7-.7-1.2-.3-.2 0-.2.2-.3.3a16 16 0 0 0-3.4 5.5l-.6 2a19.5 19.5 0 0 0-.8 6.7l.2 2.3c0 .5-.2 1-.4 1.5-.3.6-.8 1.1-1.5 1.3-1 .1-2 0-2.7-.9-.4-.5-.8-1-1-1.6-.6-1.4-1.1-1-1.8-.2l-2.1 2.9c-.4.5-.8 1-1 1.7a44 44 0 0 0-1.5 4.5 31 31 0 0 1-1.4 3.6c-.3.8-.3 1.5.2 2.2l1 1.2 1 1.4c.2.5.5 1 1 1.3 1 .6 1.5 1.4 2.2 2.2l1.9 1.7c.7.5 1.4 1.1 2 1.8l2 2 1.7 1.4 2.2 2.5 3.3 3.7 1.5 2c1.2 2 2.2 4.2 3.2 6.3.2.5.2 1 .2 1.4 0 2-2 3.1-3.8 2.1-.7-.4-1.2-1-1.7-1.7a65 65 0 0 0-8.5-11.5c-1.5-1.6-3.2-3-4.8-4.6a9 9 0 0 0-2.2-1.6c-1.6-.8-2.9-2-3.8-3.5l-1.7-2.5-2-2.5c-.3-.4-.8-.4-1.2-.2-.2 0-.4.2-.6.4a28.9 28.9 0 0 1-6.6 6.2c-1.1.8-2.2 1.6-3 2.7-.4.4-.8.8-1 1.2a11 11 0 0 0-.8 3.6l-.3 1.5a9 9 0 0 1-4.5 5.7c-1.1.6-2.4 1-3.6 1.4l-1.8.7c-1.9 1-4 1.6-6 2l-3.1.6c-1.6.4-3.2.8-4.8 1-1.6.3-3.2 1-4.9 1.1-1.2.2-2.4.6-3.6.7l-1.8.2a6 6 0 0 0-1 .1c-.9.3-1.2.8-1 1.8.2 1 .5 2 .4 3.1l.1.9.6 3.5.2 2c0 1.9 0 3.8.3 5.8v.4l.1 2 .1 2 .1 2.3.2 1.8.2 4.5.2 2 .2 2.5v3.5l.1 2.1c0 1 0 2 .2 2.8v3.9c0 1.7 0 3.4.3 5.1v1l-.1 3.5v4.6l-.1 3v1.9Zm-33-84.9a18 18 0 0 0-5.2.4c-.3 0-.7.3-1 .2-1.4 0-2.8.4-4.2.8l-2.8.6-1.3.3c-2 .5-3.8 1.2-5.6 1.9l-1.9.5-2.3 1-4.6 2.4c-2.2 1-4.5 2-6.6 3.2l-1.5.8-2 1.2-2.6 2-2.2 1.5a77.8 77.8 0 0 1-5 4l-1.8 1.4-4.1 4-1 .8c-1 .5-1.7 1.2-2.4 2-.4.6-.8 1.2-1.4 1.7a47 47 0 0 0-9.6 12.8c-.4 1-1 1.8-1.5 2.7l-.5 1a457.8 457.8 0 0 0-3.2 8.2l-.4 1.7c-.3 1.5-.7 3-.5 4.6v1.1c-.1.8 0 1.5.3 2.2l1.1 2.3a20 20 0 0 0 3 3.7 23.8 23.8 0 0 0 5.7 4.7 15 15 0 0 0 5 2.5l1.8.5a25.7 25.7 0 0 0 7.8 1.9l2.6.7 2.8 1 4.6 2 .3.2 3.4 1.5 1.1.5c1 .2 1.9.6 2.8 1l2 .5c.7 0 1.4 0 2.1.3 1.6.4 3.2.5 4.7.8l.6.1 3 1c1.3.5 2.7.6 4 .8l1-.1c1.3-.4 2.6-1 3.7-1.9.9-.6 1.7-1.3 2.2-2.3a11 11 0 0 0 1.2-4.5v-3.3c0-.9-.2-1.7-.6-2.4l-.6-1.2a10 10 0 0 0-2.4-3.6l-5.8-5.9-.7-.6c-.5-.3-.8-.2-1.1.2l-.3.6-1 3.1c-.3 1-.6 2-1.1 2.8a5 5 0 0 1-2.1 2c-1.6.7-3.5-.7-3.4-2.3 0-1.1.2-2.3.6-3.3l.9-2c.4-1.2.5-2.4.4-3.7 0-1-.8-1.4-1.8-1-.3 0-.5.2-.8.4l-2.5 1.5c-1.8 1.2-3.7 2-5.6 2.8l-1 .4c-1.2 0-2.2.5-3.2 1-.8.4-1.7.7-2.6.7a3 3 0 0 1-2.7-2c-.4-.9 0-2.1.8-2.9.7-.5 1.5-1 2.3-1.3l2.4-.7c1-.4 2-.7 2.9-1.2l2.6-1.3 1.3-.8 5-3.1a89 89 0 0 0 8.1-5.7 20 20 0 0 1 3.4-2c.6-.3 1.2-.5 1.7-.9 1.8-1 3.7-2 5.6-2.8 1.1-.5 2.2-1 3.1-1.7l2.1-1.4c1-.7 2.1-1.4 3-2.4l1.4-1.3 1.2-1.5 1-1.2c.6-1 1.8-1.2 2.8-1.5.2 0 .5 0 .6.2 1.2.5 2.1 1.8 1.6 3.5a7 7 0 0 1-1.5 2.7l-2.6 3c-1 1.1-1.9 2.2-3.2 2.9l-1 .7c-.8.7-1 1.5-.8 2.5.2 1 .2 2 .2 3 0 2.4-.2 4.8-.3 7.1v.5c-.5 1.5-1 3-1.3 4.4-.5 2-1 3.8-.8 5.8l.2 2c0 1.3.4 2.5.8 3.7.4 1.1.6 2.3.7 3.4v4.1c.1 1.5 0 3-.4 4.5-.2.8-.1 1.6.3 2.4.6 1 1 2.2 1 3.5 0 .3.2.7.4 1 .2.5.6.6 1 .4l1.7-1c.5-.3 1-.8 1.7-1a45.8 45.8 0 0 1 8-1.2c1.3 0 2.7-.2 4-.4.9 0 1.8-.1 2.6-.3h.6l2.9-.1 1.2-.1h2.2c1.4-.1 2-.6 2.1-1.8l.3-3.3V282c0-3.6 0-7.2-.2-10.8v-2.1l-.1-3v-.9c0-2.1.1-4.2-.2-6.3a12 12 0 0 1 0-2.5l-.1-2.2c0-.3-.2-.7-.1-1 .2-2-.3-4-.4-5.9l-.1-4.9-.2-1.5c-.1-1-.4-2-.2-3v-1.3c-.2-1-.4-1.8-.4-2.8v-.3l-.6-4.9-.7-4c-.3-1.7-.4-3.3-.3-5 .1-1.4.8-2.3 2.2-2.7a7 7 0 0 1 2-.4c.8 0 1.5.1 2.2-.2h.4l3.9-.4c.4 0 .9 0 1.3-.2l3.5-.8c2.1-.5 4.3-1.1 6.5-1.5a37.4 37.4 0 0 0 5-1.2c.5-.2.8-.6.7-1.3l-.2-1.2a3.7 3.7 0 0 0-3-3c-.8-.2-1.5-.2-2.3 0l-2.4.3h-2.3c-1.3-.1-2.6 0-3.8.5-.9.4-1.8.5-2.7.7-.5 0-1 .2-1.6.1-1.4-.2-2.8 0-4.1-.4l-3.2-.6c-1.6-.5-3.2-.8-4.6-1.6-.2 0-.4 0-.6-.2l-1.8-.8a54 54 0 0 1-2.3-1.2c-1.1-.6-2.2-.6-3.4-.5-1.4.2-2.7.6-4 .7l-1.5.2-2.5-.2c-1.7-.1-3.3-.5-4.9-.3Zm-37 3.2 2.9-.2a8 8 0 0 0 4.1-1.3l.7-.3 5-1.9 4.2-1.7c1-.3 1.8-1 2-2l.8-3c.3-1.2.4-2.4 0-3.6-.2-1-.8-1.8-1.5-2.4-.4-.4-.8-.3-1 .2l-.7 1c-.6 1.3-1.2 2.6-2 3.7-.3.2-.5.6-.6.9-.9 1.4-1.7 2.8-3 4-1 .9-2 1.3-3.5.8-.6-.3-1-.6-1.2-1.2-.5-1.2-.5-2.4.4-3.4 1-1 1.7-2.2 2.3-3.4l1.4-2.3.6-1.3a246.4 246.4 0 0 0 2.5-7.3l.4-1.7.9-4v-.3c0-1.2.1-2.3-.2-3.5v-.5a10 10 0 0 0-.7-3.3l-2-4.2c-.2-.6-.6-1.2-1-1.7-.7-.7-1.1-1.5-1.4-2.4-.3-.6-.4-1.4-.3-2.1l.6-1.8c.8-2 1.2-4.1.8-6.3-.1-1-.5-1.3-1.4-.6-1 .8-2.3 1.5-3.4 2.3a3 3 0 0 1-1.8.6c-.5 0-1 0-1.5-.2a2.7 2.7 0 0 1-1.4-3.3 4 4 0 0 1 1.1-1.5l2-1.7c1.6-1.4 3.3-2.7 4.3-4.7l.5-.6a12 12 0 0 0 1.5-2.8l.7-1.8.7-1.8 1-3.8c.6-1.6 1-3.2 1.3-4.9l.4-2.6.3-2.5c.3-1.3.8-2.6 1-4 0-1.3.9-2.2 2.1-2.7 1.7-.7 3.2.2 3.4 2l.2.9v1.2c-.3 1.3-.7 2.5-.7 3.8v.3a31 31 0 0 0-.7 4l-.7 3.3-1.1 4.3-1.4 3.9c-.4 1.4-1 2.9-1.8 4.2l-.3.8v1l.3.7c.6 1.3 1 2.6 1.3 4l.4 2.3v2.9c-.3 1.5-.6 3-1.2 4.5-.3.7-.3 1.3 0 1.8l1.2 1.7a13 13 0 0 1 2.1 3.8l1.4 4.7c.2.8.4 1.6.3 2.4v1.6c.1 1.1 0 2.3-.1 3.4v1.5c.2 1.1.9 2 1.7 2.8.4.3.9.6 1.2 1 1 .8 2 1.4 3.1 1.7 1 .3 1.5 0 1.7-1v-.3c0-.9.5-1.6 1-2.4l.7-1.2c.8-1.3.3-1.7-.6-2-.6-.1-1-.5-1.3-1a6.7 6.7 0 0 1-1.4-3.8l-.1-3.2a23 23 0 0 1 0-4c0-1 .2-1.9.1-2.8l.3-4.2.4-3.3.2-1.4.8-3c.4-2 .7-3.9 1.5-5.7l.6-2c.6-2.6 1.9-5 3.1-7.3l1-1.6 1.3-2.9c.7-1.4 1.6-2.7 2.5-4l2.6-3.5c.7-1 1.5-2 2.4-2.9l1.6-1.4 2.8-2.9c2.5-2.1 4.8-4.3 7.7-6 .7-.4 1.2-1 1.6-1.9a1 1 0 0 0-.1-1l-.5-.5c-2-2.2-4-4.3-6.5-6.1-.9-.7-1.2-.7-2.1-.2l-3.6 2-1.4 1c-1 .7-2 1.5-2.8 2.4l-.2.1c-.8.5-1.3 1.2-1.9 2l-2 2.5c-.9.9-1.7 1.7-2.4 2.7-.4.5-.9.9-1.4 1.2-.8.4-1.6.3-2.4-.2a2.8 2.8 0 0 1-1.1-3.7c.5-1 1-2 1.6-2.8 1-1.4 2.1-3 3.6-4l.9-1c2-2.3 4.8-3.9 7.3-5.7l.4-.3c.7-.4 1.4-.7 2-1.2.7-.5 1.5-1 2.3-1.2l1-.4c1.4-.7 2.7-.5 3.9.5l2 1.5c1 .7 1.5.7 2.4-.2l.1-.1a8.7 8.7 0 0 0 2.4-5c.2-.7.2-1.5.3-2.2l-.2-1.2c-.3-3-1.7-5.3-3.8-7.2-1.2-1-2.6-2-4-2.7-1.9-1-3.6-2.1-5.6-2.6l-1.5-.5a93 93 0 0 0-6.6-1c-1.3 0-2.5-.3-3.8 0l-1.2.3c-1.2.3-2.4.6-3.4 1.3l-1.3.7c-1.1.4-2.1 1-3 1.8l-3.4 2.5c-.7.4-1.2 1-1.8 1.5l-2.2 1.8-2.8 2.4-2 2.2a243.9 243.9 0 0 0-5 6.3l-1 1.5c-1 1.6-1.9 3.2-2.5 5l-.7 1.2c-.6 1-1.3 2-1.8 3.1a24 24 0 0 1-3 4.4l-1.3 1.9c-.4.4-.6.9-1 1.2-1.3 1.4-2.8 2.6-4 4.1l-.3.3-2.6 2.3c-2 2-4 3.7-6.1 5.6l-.5.4c-1 .7-1.9 1.5-2.7 2.4l-2.2 2-3 3.1-1.2 2a98.1 98.1 0 0 0-2.6 4.8 30.3 30.3 0 0 0-1.5 10.8c0 1 .2 2.1.7 3l1 2a7 7 0 0 0 3.5 3.2c.9.5 1.3.3 1.8-.5l.2-.2 1.6-3.2 1.2-1.7a3 3 0 0 1 1.7-1c1.3-.3 3 1.3 2.9 2.7a6 6 0 0 1-.5 2.2c-.5 1-.9 1.8-1.1 2.8a4 4 0 0 1-.6 1.2c-1 1.3-1.6 2.8-2.6 4.1l-3.8 5.4c-1.7 2.3-3 4.8-4.1 7.4l-1 2.4-.5 3-.2 3.3c0 1.3-.3 2.7 0 4v.9c0 .8 0 1.6.4 2.3l.5 1.2c.2.7.7 1.3 1.2 2l.8.8c1 1.2 2.4 2.3 3.9 3.1l1.4 1c2 1.5 4.2 2.2 6.4 3 .9.4 1.8.6 2.6.8l1.4.5 3.7.7c.9.2 1.8.2 2.7.2h1.4c1.3-.2 2.7-.3 4.1-.1Zm182.2 99c0-2.3 0-4.6-.7-6.8v-.3c0-.8-.3-1.5-.6-2.2l-.7-2a15.1 15.1 0 0 0-5.2-7.5c-.9-.8-2-1-3-.6a8 8 0 0 1-2 .3c-1.2 0-2.5.2-3.7.5l-1.8.2c-2 0-3.8.5-5.7 1l-2.4.3h-.7l-3.3.3-1.6.2c-1.7.2-3.3.6-5 .7-1 0-2.2.2-3.3.4-1.6.2-3.1.6-4.8.5l-.8.1-2.3.3-2.5.3c-1.8.4-3.6.7-5.4.7l-.8.2-4.1.5c-1.2.2-2.4.3-3.7.3l-.8.1-2.8.6c-1.5.2-3 .4-4.5.4-2 .1-4 .6-6.1.6h-.8c-1.1.2-2.3.5-3.5.4h-.7c-1.7.3-3.3.5-5 .5h-.8l-2.7.4c-1.6.2-3.2.2-4.8.5l-4.8.6-1.3.1-2.1.3-2.8.3-4.6.2h-.2c-1.9.4-3.7.8-5.5.8l-1.8.1-1.1.1-1.7.2-5 .3-1.8.1h-1.5c-1.4.1-1.5.8-1 1.7.6 1 1 2.1 1.3 3.2.5 1.6 1 3.1 1.2 4.8a132 132 0 0 1 .5 6.8v1.4l-.1 1.6v2.6l-.4 3.5-.2 1.4c-.2 1.3-.3 2.7-.6 4-.4 1.7-.8 3.4-1.5 5-.6 1.5-1 3-1.7 4.4l-1 2-.3.6c-.1.3.2.7.5.7l1.7-.1c1.8-.6 3.7-.8 5.5-1l2.7-.6 3-.5c.5 0 1 0 1.5-.2l2-.2 2.7-.4c1.4-.3 2.7-.6 4-.7l2.4-.3c.8-.2 1.7-.2 2.6-.3 1.5-.3 3-.5 4.5-.4l.8-.2c.6-.1 1.3-.4 1.9-.3.8 0 1.6-.3 2.4-.4l.4-.1c1.7 0 3.4-.6 5.1-.5l.5-.1c.7-.1 1.4-.4 2-.4 1 0 1.7-.2 2.5-.3 1-.1 1.8-.5 2.8-.4h.7c1-.2 2-.5 2.9-.5h.5c.8-.4 1.7-.5 2.5-.6l1.3-.1c1.1-.3 2.3-.5 3.5-.4h.5c1-.3 2-.6 3-.6 1.6-.5 3.2-.3 4.8-.7l2-.2c1.5-.2 3-.1 4.5-.4l2.6-.3c1-.2 2-.6 3-.5.9-.3 1.7-.2 2.5-.2h.6l3-.5 1.5-.2c1.3-.2 2.6-.2 4-.5.6-.2 1.4-.2 2-.3l2.3-.4 4.5-.8c1-.2 1.8-.4 2.7-.4.7 0 1.5-.3 2.3-.2l.5-.2c.9-.2 1.8-.5 2.7-.5 1.4-.1 2.8-.4 4.1-.7.7-.2 1.4-.4 2-.3 1.5 0 2.8-.4 4.2-.6 1.1-.2 2.3-.4 3.5-.4.4 0 .9 0 1.3-.2l2-.7c.4-.1.8-.4 1-.7 1-1.2 1.7-2.6 2.2-4l.6-1.9.4-1 1-5.5c.2-2 .5-3.9.4-5.9ZM303.9 69l-.1-3.5c-.2-1.6-.8-2.8-1.6-4.1-.4-.8-1-1.3-1.8-1.7l-2.7-1c-1-.3-2-.5-3 0a481.7 481.7 0 0 0-7.2 4.9c-1 .5-1.8 1-2.5 1.9l-.3.2c-1 .6-1.9 1.5-2.8 2.3l-.4.7c-.5.9 0 1.8 1 1.8a6 6 0 0 0 1.9-.1c2-.5 3.8-1.2 5.5-2.4l1.4-.9a10 10 0 0 0 2.2-1.4l1.4-1 1.7-.9 1.3-.5c.8-.3 1.6-.3 2.3 0 1 .5 1.5 1.6 1.2 2.5-.1.4-.4 1-.7 1.3-1.3 1.3-2.5 2.7-4 3.7-.8.6-1.3 1.4-1.7 2.4-.3.8-.5 1.8-.6 2.7l-.2 2c0 1.9.1 3.6.6 5.4.3 1.3-.9 3-2.4 3a3 3 0 0 1-2.5-1.2c-1.1-1.4-1.6-3-1.7-4.9v-3.2c0-.8-.4-1.1-1.1-1l-2.7.5c-.6.2-1 .6-1.2 1.2l-.2.4a5 5 0 0 1-1 1.9l-.6.8c-.8 1.5-1.9 2.6-3 3.8-.7.8-1.4 1.6-2.4 2.1-.3.1-.5.4-.7.6-.5.5-.6.9-.2 1.4.6 1 1.5 2 2.5 2.7l.6.3c.7.1 1.3.4 2 .8.9.5 1.8 1 2.9 1.1l2.8.6c1.4.2 2.4.8 3.4 1.8.9.9 1 1.9.4 3-.4.8-1.2 1.2-2 1.3-1.1.1-2.3.1-3.4-.1-.8-.2-1.4.2-1.6 1l-.1 1c-.2.6-.2 1.2 0 1.8l.6 4 1 4c.4 1 .8 1.2 1.8 1l.3-.2 2.5-.8c1.1-.4 2.2-.8 3.2-1.4l1.8-.9c2-.7 3.8-1.5 5.5-2.6l1.2-.7c2-1 3.8-2.1 5.6-3.4 1-.8 1.6-1.8 1.7-3.1v-2.7l-.1-1.8c-.2-.9-.2-1.7-.2-2.6V91c-.4-1.3-.7-2.5-1.3-3.8-.6-1.4-1-2.9-.8-4.4v-.5c.1-1.7-.3-3.5-.3-5.3l-.1-.6-.7-2.6-.4-2.5v-2.2Zm-31.7-3c-1 0-2-.1-3-.6-1.6-1-2.9-2.2-3.8-3.7-.4-.5-.6-1.1-.6-1.8 0-.9 0-1.7.3-2.6v-.6c.1-.6-.1-.9-.7-.8l-.8.1c-1 0-1.4.5-1.7 1.3-.3 1-.8 1.9-1.5 2.7l-2.4 3c-1.5 2-2.9 4-3.7 6.4-.4 1-.8 1.9-.7 3v.5a33 33 0 0 0-.8 5c0 1.1.2 1.5 1.3 1.8 1.6.4 3 1.2 4.4 2 .8.4 1.5 1 2.1 1.6.8.8 1.8 1.6 2.4 2.6.5.7 1 .7 1.8.3l1.7-.9 2-1a170.4 170.4 0 0 0 6.6-4.8l.7-1 1-2c.5-.8.5-1.5-.1-2.2-.6-.7-1-1.4-1.3-2.2-.5-1-.7-2-.4-3l.4-1.8c.3-1 0-1.5-1.1-1.4h-.2l-1.9.2Zm-158 238.3c-1.2 0-2 .4-2.8 1.3-.4.5-.4 1.4 0 2l1 1 3.1 1.7c1.8 1 3.6 1.8 5 3.3a9 9 0 0 0 3.7 2.2c1 .4 2 .4 3 0l1.6-.8a19 19 0 0 1 7.2-.9c1.3 0 2.6-.1 3.9.2 1.4 0 2.6.3 3.9.3 1.3.1 1.4 0 2-1.1l1.2-2.2c.8-1.2 1-2.5 1.3-3.8l.5-3.5c.5-1.6.6-3.3.8-5V298.3c-.1-.4-.4-.6-.8-.5l-1 .3c-1.1.6-2.2 1.2-3.4 1.6-1.7.7-3.5.8-5.3.8l-1.6-.3c-.5-.1-1.1-.4-1.7-.4-1.3-.1-2.5-.5-3.7-1-.2-.2-.5-.2-.8-.3-.5 0-.9.1-1.1.6l-.5 1c-.2.5-.5 1-1 1.1-.9.4-1.8.4-2.7-.1l-1.6-1.3a13 13 0 0 0-5.5-3.2 2 2 0 0 0-1.9 1c-.2.4-.2.7 0 1l1 .7 1.9.7a40 40 0 0 1 7.6 4.4c.8.5 1.2.4 1.7-.4l.6-1 .8-1.4c.6-.8 1.5-1.3 2.5-1.4 1 0 2 .5 2.3 1.5.4 1 .4 2 0 3-.7 1.2-1.1 2.5-1.7 3.7a5 5 0 0 1-3.2 2.8c-1.4.4-2.7.2-4-.4l-2.4-1.4-1.1-.8c-1.3-1.4-3-2.1-4.8-2.8l-1.7-.7a6 6 0 0 0-2.3-.6Zm53.8 12a44.4 44.4 0 0 0-1.7-10.5 5.8 5.8 0 0 0-2.9-3.6c-.4-.2-.9-.3-1.4-.3a3 3 0 0 0-1.9.8c-1 .9-2 2-2.5 3.3a188 188 0 0 0-1.8 5.4c-.3.7-.4 1.5-.5 2.2-.1.7.1 1.1.8 1.3.3.1.7.2 1 .1.6 0 1.2.2 1.7.3l1 .4c1.8.5 3.3 1.5 4.4 3 1 1.4 1.6 2.9 1.4 4.6 0 .9-.3 1.7-.5 2.6a8.6 8.6 0 0 1-3 4.5l-.4.4a9.7 9.7 0 0 1-4.4 2h-.3l-3.1.4h-.7c-.9.3-1.1.6-1.1 1.5l.2 2.2c.2 1.5.7 2.9 1.4 4.2.2.6.6 1 1 1.5.6.7 1.4 1 2.4.6l1.3-.4a8.6 8.6 0 0 0 3.7-2.8c1.3-1.8 2.2-3.8 3-5.8l.4-1 1.2-5.5.7-4.7.2-1.8v-1.6l.4-3.4Zm-14 11 1.7-.3c1.7-.1 2.7-1.2 3.5-2.6.8-1.3 0-2.5-1-2.9-.8-.3-1.7-.6-2.5-.5-1.4 0-2.8 0-4.2.2a21 21 0 0 1-4.3.3l-3.4-.6c-1.4-.3-2.8-.6-4.3-.7H135c-1.7-.3-3.3 0-4.9 1a5 5 0 0 0-2 2.4c-.4 1-.3 1.8.2 2.5 1 1.7 2.5 2.7 4.5 3 1.4.2 2.7-.1 4-.3 1.2-.1 2.4-.4 3.4-1h.4l4.7-1.1c1.8-.4 3.6-.1 5.5.1l3.3.5Zm171.1-20.6 2.5-.2a5 5 0 0 0 3-1.5c.5-.5.7-1.2.6-2l-.1-1c0-.5-.2-.9-.4-1.3a15 15 0 0 0-1-1.3c-.5-.5-1-.8-1.7-1a5.6 5.6 0 0 0-4.1 0l-1.2.6c-2.4 1-4.6 2.2-7 2.9-1.4.3-2.6.8-4 .8-.5 0-1 0-1.6.2-1 .1-1.6.5-1.6 1.7v1.3c0 1 .5 1.4 1.5 1.2.5 0 1-.2 1.5-.1h.4c1.4-.4 2.7-.6 4.1-.6l3.8-.2h1.8c1.1.3 2.3.5 3.5.5ZM273.2 60.2h.5c2.4-.7 4.8-1.6 7-2.8l3.7-2c1.1-.5 2.3-1 3.6-1.2l3.2-.7c.6-.2.8-.7.4-1.2a3.7 3.7 0 0 0-2-1.5l-1.7-.5c-1-.3-2-.5-3-.4h-2c-.7.2-1.5.4-2.3.4-.8 0-1.5.3-2.2.5a4 4 0 0 0-1.3.8 27.7 27.7 0 0 0-4.1 4l-1.6 2.1c-.7 1.2-.1 2.3 1.3 2.5h.5Zm-11-10 1-.2c2.2-.4 4.3-1.4 6.4-2.3l1.6-.6 4-1.4c1.3-.5 2.6-1.1 4-1.3.3 0 .7-.3 1-.5.4-.2.4-.6.2-1l-.2-.3c-1-1.1-2.2-2-3.8-2.3-.4 0-.5-.2-1.2-.2s-1.3.2-2 .3c-.7 0-1.5.4-2.2.6-1.5.5-2.8 1.4-4 2.3l-2.2 1.6c-1.2.8-2.3 1.7-3.4 2.7l-.8.8c-.4.5-.2 1.1.4 1.4l1.2.3Zm-13.5 34.5c-1.2 0-2 .5-2.7 1.4-.4.6-.3 1 .3 1.4l1.8.5 1.7.6 1.1.5 1.5.8 2.7 1.9c.8.5 1.5 1 2 1.9L259 96c.5.6.8.6 1.3 0l.6-1.2c.4-.7.4-1.3 0-1.9-.9-1.2-1.6-2.5-2.6-3.6a15.4 15.4 0 0 0-4-3.2c-1-.5-2-.8-3-1-.9-.2-1.8-.1-2.6-.4Zm3.6 15c-.7 0-1.4 0-2-.4-1-.7-1.6-1.6-1.4-2.9v-.7c0-.5-.2-1-.6-1.2a5 5 0 0 0-1.8-.8l-1.5-.3-1.3-.2c-.5 0-1 0-1.5.3l-.2.4.3.2 1 .4c.9.4 1.5 1 1.5 2 .1 1-.5 1.8-1.3 2.4-.4.3-.8.4-1.3.2l-1-.2c-.4 0-.6.3-.5.7.2.5.6 1 1 1.3.8.8 1.2.8 2 0l.3-.4c.4-.4.8-.6 1.3-.6 1.2 0 2.3.3 3.2 1.1.7.7 1.2 1.4 1.3 2.3l.2.6c.1.4.4.6.8.6 1 0 2 0 2.8-.5.5-.3.7-.7.8-1.2 0-.9 0-1.7-.3-2.5-.2-.5-.5-.7-1-.6h-.8Zm-43.1 99.8c-.5 0-1 0-1.4.4-.3.3-.3.6 0 .9l.6.3 1.3.8c1.2.5 2 1.4 2.7 2.5.8 1.1 1.1 2.4 1.6 3.6l.4.8c.3.6.7.8 1.4.5.8-.5 1.6-1 1.8-2 .3-1 .5-2 .5-3.1.1-1 .3-2 .7-3l.3-.5c.1-.4 0-.7-.5-.7a3 3 0 0 0-1 0c-.9.3-1.8.3-2.7.2l-2.7-.2-1-.1-2-.4Z"
                                    fill="currentColor"
                                ></path>
                                <path
                                    d="M190.2 143h1.4c.6.1 1 .4 1.4.8.7.8 1.1 1.8.8 2.9-.2.7-.6 1.2-1.2 1.5-.6.2-1.2.5-1.9.6-1.3.3-2.7.5-4 1.1-1.1.7-2.4 1.4-3.4 2.3a32.5 32.5 0 0 0-5 5c-.4.5-.8.8-1.4 1-1.5.6-3.3-.5-3.5-2.1-.2-1.2.2-2.2.8-3l1.1-1.6c1.2-1.3 2.4-2.6 3.8-3.6 1.2-1 2.4-1.8 3.7-2.6 1.8-1.3 5.2-2.3 7.4-2.3ZM171.2 143.3H170c-1 .4-1.8 0-2.6-.2l-.8-.4c-1.6-.7-2.3-2.5-2-4 0-.6.4-1 .7-1.4.6-.5 1.2-.8 1.8-1 1.9-1 3.9-1.4 5.9-2a28.7 28.7 0 0 1 2.2-.5c1.5 0 3 .1 4.3.6.5.1 1 .4 1.3.7 1.2 1 1.4 2 1 3.2-.4 1.1-1 2-2.2 2.5-1.8.7-3.6 1.6-5.6 2l-1.4.4h-1.4ZM159 185.7c0-1.8 1.2-3.2 3-3.8l.4-.1c1.5-.4 2.7-.2 3.7 1l2.1 2.5c.6.6.8 1.3.8 2.2 0 1.6-1.2 2.7-2.9 2.5a4 4 0 0 1-1.5-.5c-.9-.5-1.8-.8-2.8-.7-1.4.2-2.7-1.1-2.7-2.6v-.5ZM234.2 121.3c-1 .1-1.6-.4-2.2-1-.6-.6-.8-1.3-.7-2.1 0-1.6 1.4-2.8 3-2.7 1.7 0 3 1.4 3 2.7 0 1-.3 1.8-1 2.4-.5.5-1.2.8-2.1.7ZM246.5 265.5c0-2 .4-4 1.4-5.9.6-1 1.4-1.8 2.5-2.2l1.2-.5a7 7 0 0 1 3.4-.7 4 4 0 0 1 1.7.4c2 1 3.5 2.2 4.7 4a9.8 9.8 0 0 1 1.5 3.8v.6c.5 1.4.5 2.8.3 4.3a7.8 7.8 0 0 1-6.7 7h-.7c-1.8-.2-3.4-.9-5-1.7-2-1-3-2.9-3.8-5-.4-1.2-.4-2.6-.5-4Zm5.7 0c0 .9.2 1.7.5 2.6.4.9 1 1.6 2 2 1 .5 2 0 2.3-1.2l.2-1.1c.1-1.4-.1-2.6-.8-3.8-.3-.5-.7-.9-1.2-1.2-1.4-.8-2.3 0-2.7 1-.2.5-.2 1-.3 1.6ZM205 284.6c-1.2 0-2.4-.4-3.6-1a6 6 0 0 1-3.3-4.7c0-.8-.3-1.7-.4-2.5-.2-.7-.2-1.4 0-2.1.2-1.6.6-3.2 1.3-4.6 1.2-2.3 3-3.7 5.6-4.1l1-.2c1.6-.3 2.8.3 4 1.3 1.5 1.4 2.4 3.2 3.2 5.2.1 1.2.4 2.5.2 3.7l-.6 3.3c-.5 2-1.7 3.7-3.6 4.7l-.9.5c-1 .5-1.6.7-3 .5Zm2-9.5c0-.9-.3-1.8-.6-2.7l-.3-.4c-.4-.5-.8-.6-1.4-.3a2 2 0 0 0-.9 1.3c-.3 1-.5 2-.5 3.1 0 1 .4 1.6 1 2.1l.6.2c.8.1 1.2-.1 1.6-1a6 6 0 0 0 .5-2.3ZM194 239c0-1.2.4-2.3.7-3.4.4-1.5 1-3 2.1-4.3l1.2-1.6c1.2-1.3 2.8-1.6 4.4-1.1 1 .2 1.9.6 2.7 1a7 7 0 0 1 2.2 1.6c.7.7 1.2 1.7 1.5 2.6.4 1.7.6 3.4.3 5.2a28 28 0 0 1-.8 3.8 5 5 0 0 1-1.8 2.6l-1.2 1a4 4 0 0 1-2.3.8h-.4c-1.7.6-3.2 0-4.6-.9-2-1.1-3-3-3.6-5.2l-.4-2.1Zm9.4-1.3v-.9c0-.5-.2-1-.5-1.3-.5-.6-1-.6-1.5 0-1.2 1.2-1.3 2.7-1 4.3 0 .4.3.8.6 1 .5.4 1.2.4 1.6 0l.4-.8c.3-.8.5-1.6.4-2.3ZM242.2 219.1a9 9 0 0 1 3.2 0 12.7 12.7 0 0 1 6.8 6c.3 1 .6 1.7.7 2.6 0 1 0 2.2-.3 3.1-.4 1.4-1 2.7-2 3.8a6.3 6.3 0 0 1-6.6 1.6c-1.2-.3-2.4-.9-3.4-1.7a10 10 0 0 1-2.7-3.5l-.7-2.6c-.5-2.5-.4-4.9.8-7.2.7-1.3 1.9-2 3.3-2h1Zm4.6 9.2c0-.2-.1-.7-.3-1-.4-.8-1-1.5-1.7-2-.2-.1-.4-.3-.7-.3-.6-.3-1.2.1-1.2.8-.1 1.4.4 2.7 1.3 3.8l.5.4c.9.5 1.8 0 2-1l.1-.7ZM180.4 335.2c-1.1 0-2-.6-2.8-1.2-.2-.1-.3-.4-.4-.6-.4-1.4.3-2.8 1.7-3.4.9-.4 1.9-.6 2.9-.8 1.2-.2 2.5-.6 3.7-.6 2-.2 3.9-.7 5.8-.8 1.3-.1 2.7-.5 4-.7.8-.1 1.5-.3 2.3-.3.9 0 1.7-.3 2.5-.3 1-.1 2-.4 3-.4.8 0 1.5-.2 2.3-.3l.6-.2 2.5-.2 3-.5c1.3-.2 2.6-.3 3.8-.6.7-.3 1.5-.2 2.2-.3l2.3-.4 1.1-.1c1 0 1.9-.2 2.8-.4h.5c1 0 2-.4 3-.5.7 0 1.4-.2 2-.3.8 0 1.5-.2 2.3-.3h.4l3.3-.6H237l4-.7c1.4-.2 2.8-.3 4.1-.6 1.9-.3 3.7-.4 5.6-.8.8-.2 1.7-.2 2.5-.3 1.4-.3 2.9-.3 4.3-.7h.4l1.8-.3c1.3-.2 2.5-.2 3.7-.5l2.3-.3c1.6-.2 3.1-.6 4.7-.6 1.3 0 2.6-.3 3.8-.6l2.7-.4 3-.3c1 0 2-.2 2.9-.4.4 0 .8 0 1.2-.2.5-.2 1-.2 1.6-.2l2.9-.4c.8 0 1.6-.3 2.4-.4 1.6-.2 3 .6 3.6 2.1.3 1.1.1 2-.8 2.8-1 .8-2.3 1.2-3.7 1.3l-2 .2-3.6.5c-2 .4-4 .4-6 1-.6 0-1.3 0-2 .2l-5.4.7c-2.4.3-4.8.9-7.2 1-1 0-2 .4-3 .5-1 .2-1.8.4-2.7.4-1.6 0-3 .3-4.6.6-1 .2-2 .4-3 .4l-1.3.2-4 .5-3.9.6c-1.6.2-3.3.6-5 .7-1.3.2-2.6.3-3.8.6l-3 .4c-1.6 0-3.2.6-4.8.6a8 8 0 0 0-2.2.3l-3.6.6c-1.6.2-3.3.2-4.9.5l-5.2.7-3.6.6c-1.4.2-2.7.5-4 .5-1.5.1-3 .4-4.4.7-.5.2-1 .1-1.6.2l-2.1.3-4.2.5c-2.5.3-5 .5-7.4 1.1l-1.1.2Z"
                                    fill="currentColor"
                                ></path>
                            </svg>
                        </span>
                        <div className="explain-detail">
                            All Cook을 통해 당신의 주방을 세계의 건강한
                            <br /> 레시피로 가득 채워보세요!
                        </div>
                        <table className="explain-table">
                            <thead>
                                <tr>
                                    {/* td 태그는 중앙정렬 되어있어 border 길이가 너무 길고 조절이 불가능하기 때문에, span 태그를 추가하여 컨트롤 */}
                                    <td>
                                        <span>01</span>
                                    </td>
                                    <td>
                                        <span>02</span>
                                    </td>
                                    <td>
                                        <span>03</span>
                                    </td>
                                </tr>
                                <tr>
                                    <td>다양한 레시피</td>
                                    <td>편리한 검색</td>
                                    <td>영양성분 제공</td>
                                </tr>
                            </thead>
                            <tbody>
                                <tr>
                                    <td>
                                        All Cook은 한식은 물론, 일식, 양식, 중식에 <br />
                                        이르기까지 다양한 지역을 아우르는 레시피를 <br />
                                        제공합니다. 주방에서 세계를 요리해보세요.
                                    </td>
                                    <td>
                                        재료를 검색하면 해당 재료가 들어가는 <br />
                                        레시피를 찾아드리고, 원하는 메뉴의 이름을 <br />
                                        검색하면 해당 메뉴의 레시피를 제공해드립니다.
                                    </td>
                                    <td>
                                        음식의 레시피 뿐만 아니라 영양성분도 함께 <br />
                                        제공합니다. All Cook과 함께 건강한 식생활을 <br />
                                        시작해보세요.
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                        <div className="learn-more">
                            <Link
                                style={{ textDecoration: "none", color: "inherit" }}
                                href={"/recipe"}
                            >
                                레시피 보기
                            </Link>
                        </div>
                    </div>

                    {/* 추천 메뉴 영역을 차지하는 컨테이너 */}
                    <div className="recommend-container">
                        <div className="recommend-title">오늘의 추천 메뉴</div>
                        <div className="recommend-subtitle">
                            All Cook이 추천드리는 메뉴입니다. 오늘은 이 레시피 어떠신가요?
                        </div>
                        {/* <table className="menu-table">
                            <tbody>
                                <tr>
                                    {
                                        recomMenu.length !== undefined &&
                                        recomMenu.slice(0, 4).map((item, index) => {
                                            const isHovered = recomHovered;
                                            return (
                                                <td>
                                                    <div>
                                                        <div onClick={() => menuClick(item.RCP_NM, item.RCP_SEQ)} className="td-content">
                                                            <Image
                                                                src={`${item.ATT_FILE_NO_MK}`}
                                                                style={{
                                                                    borderRadius: 8,
                                                                    cursor: "pointer",
                                                                    transition: "transform 0.3s ease",
                                                                    transform: isHovered[index]
                                                                        ? "scale(1.05)"
                                                                        : "scale(1)",
                                                                }}
                                                                width={250}
                                                                height={250}
                                                                alt={""}
                                                                onMouseEnter={() => imgMouseEnter(index, "recom")}
                                                                onMouseLeave={() => imgMouseOut(index, "recom")}
                                                            />
                                                        </div>
                                                        <div className="RCP_NM">{item.RCP_NM}</div>
                                                        <div className="RCP_PAT2">{item.RCP_PAT2}</div>
                                                    </div>
                                                </td>
                                            );
                                        })}

                                </tr>
                            </tbody>
                        </table> */}
                        {
                            <RecomMenu
                                menu={recomMenu}
                                menuHovered={recomHovered}
                                category={'recom'}
                                menuClick={menuClick}
                                imgMouseEnter={imgMouseEnter}
                                imgMouseOut={imgMouseOut}
                            /> ||
                            <SkeletonUI />
                        }
                    </div>

                    {/* 추천 후식 영역을 차지하는 컨테이너 */}
                    <div className="recommend-container">
                        <div className="recommend-title">
                            식사 후 허전함을 달래줄 레시피
                        </div>
                        <div className="recommend-subtitle">
                            식사 후엔 후식도 잊지 마세요!
                        </div>
                        {/* <table className="menu-table">
                            <tbody>
                                <tr>
                                    {
                                        dessertMenu.length !== undefined &&
                                        dessertMenu.slice(0, 4).map((item, index) => {
                                            const isHovered = dessertHovered;
                                            return (
                                                <td>
                                                    <div>
                                                        <div onClick={() => menuClick(item.RCP_NM, item.RCP_SEQ)} className="td-content">
                                                            <Image
                                                                src={`${item.ATT_FILE_NO_MK}`}
                                                                style={{
                                                                    borderRadius: 8,
                                                                    cursor: "pointer",
                                                                    transition: "transform 0.3s ease",
                                                                    transform: isHovered[index]
                                                                        ? "scale(1.05)"
                                                                        : "scale(1)"
                                                                }}
                                                                width={250}
                                                                height={250}
                                                                alt={""}
                                                                onMouseEnter={() => imgMouseEnter(index, "dessert")}
                                                                onMouseLeave={() => imgMouseOut(index, "dessert")}
                                                            />
                                                        </div>
                                                        <div className="RCP_NM">{item.RCP_NM}</div>
                                                        <div className="RCP_PAT2">{item.RCP_PAT2}</div>
                                                    </div>
                                                </td>
                                            );
                                        })}
                                </tr>
                            </tbody>
                        </table> */}
                        {
                            <RecomMenu
                                menu={dessertMenu}
                                menuHovered={dessertHovered}
                                category={'dessert'}
                                menuClick={menuClick}
                                imgMouseEnter={imgMouseEnter}
                                imgMouseOut={imgMouseOut}
                            />
                        }
                    </div>
                </div>
                <Footer />
            </div>
            <style jsx> {`
                .banner-container {
                    display: flex;
                    flex-direction: column;
                    position: absolute;
                    margin-top: 340px;
                    margin-right: 675px;
                }
                {
                    /* 서서히 나타나는 애니메이션 */
                }
                @keyframes fade-in {
                    from {
                    opacity: 0;
                    }
                    to {
                    opacity: 1;
                    }
                }
                .welcome-section {
                    color: #ffffff;
                    font-size: 55px;
                }
                .search-section {
                    margin-top: 25px;
                    margin-left: 7px;
                    color: #ffffff;
                    {
                    /* animation: fade-in 2s ease-out; */
                    }
                }
                .search-section div:nth-child(1) {
                    font-size: 18px;
                    font-weight: 300;
                }
                .banner-button {
                    display: inline-block;
                    margin-top: 40px;
                }
                .banner-button span {
                    padding: 20px 40px;
                    margin-right: 20px;
                    border: 1px solid transparent;
                    border-radius: 12px;
                    font-size: 17px;
                    background-color: #ffffff;
                    color: #111111;
                    cursor: pointer;
                    transition: background-color 0.2s ease;
                }
                .banner-button span:hover {
                    background-color: #e1e1e1;
                }
                .input-container {
                    display: flex;
                    padding-top: 18px;
                    border: none;
                }
                .search-input {
                    outline: none;
                    width: 300px;
                    height: 30px;
                    font-size: 14px;
                    padding-left: 12px;
                    padding-top: 3px;
                    padding-bottom: 3px;
                    border-radius: 5px;
                    border: none;
                }
                .img-search {
                    position: relative;
                    top: 7px;
                    right: 33px;
                    color: r
                    gb(76, 75, 75);
                    cursor: pointer;
                }
                .banner-img {
                    width: 100vw;
                    margin-left: calc(50% - 50vw);
                    margin-right: calc(50% - 50vw);
                }
                {
                    /* 헤더 및 배너 컨테이너를 제외한 컨텐츠의 영역 */
                }
                .contents-container {
                    {
                    /* margin-left: 15%;
                            margin-right: 15%; */
                    }
                }
                .explain-container {
                    display: flex;
                    flex-direction: column;
                    justify-content: center;
                    align-items: center;
                    padding-top: 50px;
                    padding-bottom: 50px;
                    color: #002312;
                    background-color: #f9f7f5;
                }
                .explain-svg {
                    width: 115px;
                }
                .explain-detail {
                    text-align: center;
                    font-size: 30px;
                    font-weight: 300;
                    margin-top: 10px;
                    margin-bottom: 50px;
                    font-weight: 400;
                }
                .explain-table {
                    text-align: center;
                }
                .explain-table td {
                    {
                    /* border-right: 1px solid black; */
                    }
                }
                .explain-table thead tr:nth-child(1) td span {
                    padding: 0 28px;
                    font-size: 22px;
                    border-bottom: 1.5px solid #000000;
                    padding-bottom: 5px;
                    font-weight: 600;
                }
                .explain-table thead tr:nth-child(1) td {
                    padding-bottom: 20px;
                }
                .explain-table thead tr:nth-child(2) {
                    font-size: 20px;
                }
                .explain-table thead tr:nth-child(2) td {
                    padding-bottom: 20px;
                }
                .explain-table tbody td {
                    padding: 0px 25px;
                    font-size: 14px;
                }
                .learn-more {
                    margin-top: 60px;
                    margin-bottom: 15px;
                    padding: 15px 25px;
                    color: #ffffff;
                    border: 1px solid black;
                    background-color: #002312;
                    border-radius: 5px;
                    cursor: pointer;
                }
                .about-container {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    flex-direction: column;
                    position: relative;
                    padding-bottom: 50px;
                    margin-bottom: 120px;
                    color: #002312;
                    background-color: #f9f7f5;
                    {
                    /* background-color: #fcfcfa; */
                    }
                }
                .about-title {
                    text-align: center;
                    margin-bottom: 35px;
                    font-size: 35px;
                    font-weight: 700;
                }
                .about-img {
                    opacity: 0.1;
                }
                .recommend-container {
                    display: flex;
                    justify-content: center;
                    align-items: center;
                    flex-direction: column;
                    position: relative;
                    margin-top: 130px;
                    margin-bottom: 160px;
                    color: #111111;
                }
                .recommend-title {
                    margin-bottom: 8px;
                    text-align: center;
                    font-size: 30px;
                    font-weight: 700;
                }
                .recommend-subtitle {
                    margin-bottom: 35px;
                    font-size: 13.5px;
                    color: #5c5c5c;
                }
        `}
            </style>
        </>
    );
}

// export const getServerSideProps = wrapper.getServerSideProps(
//     (store) => async () => {
//         const API_KEY = process.env.API_KEY;

//         // api 요청을 보낼 첫번째 파라미터와 두번째 파라미터를 1~1124 사이의 랜덤 정수로 생성
//         // const startParam = Math.floor(Math.random() * 1121) + 1;
//         // const endParam = startParam + 20;

//         const startParam = 1;
//         const endParam = 1000;

// const response = await fetch(`http://openapi.foodsafetykorea.go.kr/api/
// ${API_KEY}/COOKRCP01/json/${startParam}/${endParam}`, {
//     method: "GET",
// });
// const jsonResult = await response.json();
// const result = jsonResult.COOKRCP01.row;

//         // 포함하지 않을 문자열을 필터링하는 정규식
//         // 미완된 음식의 이미지나, 워터마크가 있는 이미지를 필터링하기 위함
//         const regex =
//             /(uploadimg\/(2014|2015|2019|2020|2021|2023)|common\/ecmFileView\.do\?)/;

//         const excludeSeqs = ['2981', '886', '3217', '977', '745', '760'];

//         // const menuData = result.map((item: Menu) => {
//         //     // 구조 분해 할당 - 각 item에서 필요한 필드들을 추출 선언
//         //     const { RCP_NM, ATT_FILE_NO_MK, INFO_CAR,
//         //         INFO_ENG, INFO_FAT, INFO_NA, INFO_PRO,
//         //         MANUAL01, MANUAL02, MANUAL03, RCP_NA_TIP,
//         //         RCP_PARTS_DTLS, RCP_PAT2 } = item;
//         //     return {
//         //         RCP_NM, ATT_FILE_NO_MK, INFO_CAR,
//         //         INFO_ENG, INFO_FAT, INFO_NA, INFO_PRO,
//         //         MANUAL01, MANUAL02, MANUAL03, RCP_NA_TIP,
//         //         RCP_PARTS_DTLS, RCP_PAT2
//         //     };

// const menuData = result.filter((item: Menu) => {
//     // ATT_FILE_NO_MK 값에서 정규식과 일치하는 부분을 찾음
//     // match 함수를 이용해 정규식과 일치한다면 배열로 반환하고, 일치하지 않는다면 null
//     const match = item.ATT_FILE_NO_MK.match(regex);
//     // match가 null인 경우에만 item 반환
//     // ** filter 함수가 true일 때 item을 반환하고, false일 땐 반환하지 않는 것을 이용 **
//     return match === null && !excludeSeqs.includes(item.RCP_SEQ);
// });

//         store.dispatch(setAllMenu(menuData));

//         // '후식'을 제외한 카테고리만 받아와서 배열로 생성
//         const categories = ["반찬", "국&찌개", "일품"];
//         const foodData = menuData.filter((menuData: Menu) =>
//             categories.includes(menuData.RCP_PAT2)
//         );
//         // '후식'만 받아와서 배열로 생성
//         const dessertData = menuData.filter(
//             (menuData: Menu) => menuData.RCP_PAT2 === "후식"
//         );

//         // 배열의 길이 안에서 랜덤 인덱스를 받아옴
//         const getRandomIndex = (length: number) => {
//             return Math.floor(Math.random() * length);
//         };

//         // 랜덤 인덱스를 저장하는 변수
//         let foodRandomIndicies: number[] = [];
//         let dessertRandomIndicies: number[] = [];

//         // 4개의 요소만 사용할 것이기 때문에, 랜덤 인덱스 배열의 길이가 4미만일 때까지 반복
//         while (foodRandomIndicies.length < 4) {
//             let foodIndex = getRandomIndex(foodData.length);
//             // 배열에 이미 인덱스가 존재하지 않는 경우에만 요소 추가
//             if (!foodRandomIndicies.includes(foodIndex)) {
//                 foodRandomIndicies.push(foodIndex);
//             }
//         }

//         while (dessertRandomIndicies.length < 4) {
//             let dessertIndex = getRandomIndex(dessertData.length);
//             if (!dessertRandomIndicies.includes(dessertIndex)) {
//                 dessertRandomIndicies.push(dessertIndex);
//             }
//         }

//         // 랜덤 인덱스의 길이만큼 배열의 요소를 추출해서 새 배열 생성
//         const randomFoodData = foodRandomIndicies.map((index) => foodData[index]);
//         const randomDessertData = dessertRandomIndicies.map(
//             (index) => dessertData[index]
//         );

//         store.dispatch(setRecomMenu(randomFoodData));
//         store.dispatch(setDessertMenu(randomDessertData));

//         return {
//             props: {},
//         };
//     }
// )


export async function getStaticProps() {
    return {
        props: {}
    }
}
